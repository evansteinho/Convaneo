Convaneo {
	Program                     = (Statement | StatementWithBreak | StatementWithNumericReturn | StatementWithStringReturn | StatementWithBooleanReturn | StatementWithArrayReturn | StatementWithVoidReturn )+
    Statement                   = VariableDeclaration
    							| AssignmentStatement
                                | ArrayAssignmentExpression
                                | FunctionDeclaration
    							| PrintStatement
                                | WhileStatement
                                | ElseStatement
                                | ElseIfStatement
                                | IfStatement
                                | ForLoopStatement
                                | ForEachStatement
                                | IterationStatement
    StatementWithNumericReturn  = Statement
                                | "return" NumericExpression ";"	--return
                                | StatementWithBreak
    StatementWithStringReturn   = Statement
                                | "return" StringExpression ";"		--return
                                | StatementWithBreak
    StatementWithBooleanReturn  = Statement
                                | "return" BooleanExpression ";"		--return
                                | StatementWithBreak
    StatementWithArrayReturn    = Statement
                                | "return" ArrayExpression ";"		--return
                                | StatementWithBreak
    StatementWithVoidReturn     = Statement
                                | "return" ";"		--return
                                | StatementWithBreak
    StatementWithBreak          = Statement
                                | "break" ";"		--break
                                | "continue" ";"		--continue
	VariableDeclaration         = numericType id ":=" NumericExpression ";"
                                | stringType id ":=" StringExpression ";"
                                | booleanType id ":=" BooleanExpression ";"
                                | arrayType id ":=" ArrayExpression ";"
    AssignmentStatement         = id "=" (NumericExpression | StringExpression | BooleanExpression | ArrayExpression) ";"		--assignment
    							| id incrementOperator (NumericExpression) ";"		--Increment
    FunctionDeclaration         = numericType id "(" Arguments ")" NumericReturnBlock
                                | stringType id "(" Arguments ")" StringReturnBlock 
                                | booleanType id "(" Arguments ")" BooleanReturnBlock 
                                | arrayType id "(" Arguments ")" ArrayReturnBlock 
                                | "void" id "(" Arguments ")" VoidReturnBlock 
    PrintStatement              = "print" "(" TypecastExpression ")" ";"
    							| "print" "(" StringExpression ")" ";"
                                | "print" "(" id ")" ";"
    WhileStatement              = "while" "(" BooleanExpression ")" ReturnBlock
    ElseStatement               = ElseIfStatement "else" ReturnBlock 		-- ifelseifelse
                                | IfStatement "else" ReturnBlock			--ifelse
    ElseIfStatement             = IfStatement "else if" "(" BooleanExpression ")" ReturnBlock
    IfStatement                 = "if" "(" BooleanExpression ")" ReturnBlock
    ForLoopStatement            = "for" "(" VariableDeclaration ";" BooleanExpression ";" (NumericExpression | StringExpression | BooleanExpression | ArrayExpression) ")" ReturnBlock		--for
    ForEachStatement            = "for" "(" (numericType | stringType | booleanType | arrayType) "in" (stringType | arrayType) ")" ReturnBlock		--for
    IterationStatement          = iterationOperator id ";"
                                | id iterationOperator ";"
    FunctionCallExpression      = id "(" ArgumentsExpression ")"
    Arguments                   = ArgumentTerm*
    ArgumentTerm                = (numericType | stringType | booleanType | arrayType) id ","?
    ArgumentsExpression         = ArgumentValue*
    ArgumentValue               = (NumericExpression | StringExpression | BooleanExpression | ArrayExpression | id) ","?
    TypecastExpression          = "(" (numericType | stringType | booleanType) ")" FunctionCallExpression 
								| "(" (numericType | stringType | booleanType) ")" id
    NumericExpression           = NumericExpression "+" NumericTerm     --add
                                | NumericExpression "-" NumericTerm     --sub
                                | NumericTerm
    NumericTerm                 = NumericTerm "*" NumericFactor     --mul
                                | NumericTerm "/" NumericFactor     --div
                                | NumericTerm "%" NumericFactor     --mod
                                | NumericFactor
    NumericFactor               = NumericPrimary ("**") NumericFactor       --exp
                                | "-" NumericPrimary       --neg
                                | NumericPrimary
    NumericPrimary              = numericValue
    							| "(" numericType ")" NumericExpression		--typecast
                                | id iterationOperator       --iterPost
                                | iterationOperator id       --iterPre
                                | "(" NumericExpression ")"     --parens
                                | FunctionCallExpression		--funcs
                                | id		--id
    StringExpression            = StringExpression "+" StringPrimary       --add
                                | StringPrimary
    StringPrimary               = stringValue
  							  	| "(" stringType ")" StringExpression		--typecast
                                | "(" StringExpression ")"      --parens
								| FunctionCallExpression		--funcs
                                | id        --id
    BooleanExpression           = BooleanExpression conditionalOperator BooleanPrimary       --conditionalOps
                                | BooleanPrimary
    BooleanPrimary              = booleanValue
    							| "(" booleanType ")" BooleanExpression		--typecast
                                | "(" BooleanPrimary ")"        --parens
                                | FunctionCallExpression		--funcs
                                | NumericExpression		--numerals
                                | StringExpression		--strings
                                | BooleanExpression		--bools
                                | id        --id
    ArrayAssignmentExpression   = id "[" NumericExpression "]" "=" (NumericExpression | StringExpression | BooleanExpression | ArrayExpression) ";"
    ArrayExpression  = ArrayExpression "+" ArrayPrimary       --union
                                | ArrayExpression "-" ArrayPrimary       --difference
                                | ArrayPrimary
    ArrayPrimary     = (numericType | stringType | booleanType)"[" digit+ "]" "()"		--array
                                | "(" ArrayExpression ")"      --parens
								| FunctionCallExpression		--funcs
                                | id		--id
    NoReturnBlock               = "{" Statement+ "}"
    ReturnBlock                 = BreakReturnBlock
                                | NumericReturnBlock
                                | StringReturnBlock
                                | BooleanReturnBlock
                                | ArrayReturnBlock
                                | VoidReturnBlock
    NumericReturnBlock          = "{" StatementWithNumericReturn+ "}"
    StringReturnBlock           = "{" StatementWithStringReturn+ "}"
    BooleanReturnBlock          = "{" StatementWithBooleanReturn+ "}"
    ArrayReturnBlock            = "{" StatementWithArrayReturn+ "}"
    VoidReturnBlock             = "{" StatementWithVoidReturn+ "}"
    BreakReturnBlock            = "{" StatementWithBreak+ "}"

    numericType                 = "int" | "float" | "double"
    stringType                  = "string"
    booleanType                 = "bool"
    arrayType                   = (arrayType | numericType | stringType | booleanType)"[]"
    booleanValue                = ("true" | "false")
    numericValue                = digit+ ("." digit+)?
    stringValue                 = "\"" (~"\"" any)* "\""
    iterationOperator           = "++" | "--"
    incrementOperator			= "+=" | "-=" | "*=" | "/="
    conditionalOperator         = "<=" | "<" | "==" | "!=" | ">=" | ">"
    keyword                     = "print" | "while" | "if" | "else" | "break" | "continue" | "void" | numericType | stringType | booleanType | arrayType | booleanValue
    id                          = ~keyword letter idchar*
    idchar                      = letter | digit | "_"
    space                       += "//" (~"\n" any)*          --comment
}