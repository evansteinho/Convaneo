Convaneo {
	Program                     = Statement+
    Statement                   = FunctionDeclaration
                                | VariableDeclaration
    							| VariableAssignment
                                | ArrayAssignment
    							| PrintFunction
                                | WhileLoop
                                | ElseStatement
                                | ElseIfStatement
                                | IfStatement
                                | ForLoop
                                | ForEach
                                | Iteration
                                | "return" (NumericExpression | StringExpression | BooleanExpression | ArrayExpression) ";"    --return
                                | "return" ";"    --shortReturn
                                | "break" ";"   --break
    FunctionDeclaration         = (arrayType | numericType | stringType | booleanType  | "void") id "(" Arguments ")" Block --args
	VariableDeclaration         = numericType id ":=" NumericExpression ";" --numeric
                                | stringType id ":=" StringExpression ";"   --string
                                | booleanType id ":=" BooleanExpression ";" --bool
                                | arrayType id ":=" ArrayExpression ";" --array
    VariableAssignment          = id "=" (NumericExpression | StringExpression | BooleanExpression | ArrayExpression) ";"   --assign
    							| id incrementOperator NumericExpression ";"		--operator
                                | (arrayType | numericType | stringType | booleanType  | "void") id "(" ")" Block   --noArgs
    PrintFunction               = "print" "(" StringExpression ")" ";"
                                | "print" "(" id ")" ";"
    WhileLoop                   = "while" "(" BooleanExpression ")" Block
    ElseStatement               = ElseIfStatement "else" Block 		-- ifelseifelse
                                | IfStatement "else" Block			--ifelse
    ElseIfStatement             = IfStatement "else if" "(" BooleanExpression ")" Block
    IfStatement                 = "if" "(" BooleanExpression ")" Block
    ForLoop                     = "for" "(" VariableDeclaration ";" BooleanExpression ";" (VariableAssignment | Iteration) ")" Block		--for
    ForEach                     = "for" "(" (numericType | stringType | booleanType | arrayType) id "in" (numericType | stringType | arrayType | id) ")" Block		--for
    Iteration                   = iterationOperator id ";"
                                | id iterationOperator ";"
    FunctionCallExpression      = id "(" ArgumentsExpression ")"
    Arguments                   = ArgumentTerm*
    ArgumentTerm                = (numericType | stringType | booleanType | arrayType) id ","?
    ArgumentsExpression         = ArgumentValue*
    ArgumentValue               = (NumericExpression | StringExpression | BooleanExpression | ArrayExpression | id) ","?
    TypecastExpression          = "(" (numericType | stringType | booleanType) ")" FunctionCallExpression 
								| "(" (numericType | stringType | booleanType) ")" id
    NumericExpression           = NumericExpression "+" NumericTerm     --add
                                | NumericExpression "-" NumericTerm     --sub
                                | NumericTerm
    NumericTerm                 = NumericTerm "*" NumericFactor     --mul
                                | NumericTerm "/" NumericFactor     --div
                                | NumericTerm "%" NumericFactor     --mod
                                | NumericFactor
    NumericFactor               = NumericPrimary ("**") NumericFactor       --exp
                                | "-" NumericPrimary       --neg
                                | NumericPrimary
    NumericPrimary              = numericValue
    							| TypecastExpression		--typecast
                                | id iterationOperator       --iterPost
                                | iterationOperator id       --iterPre
                                | "(" NumericExpression ")"     --parens
                                | FunctionCallExpression		--funcs
                                | id		--id
    StringExpression            = StringExpression "+" StringPrimary       --add
                                | StringPrimary
    StringPrimary               = stringValue
  							  	| TypecastExpression		--typecast
                                | "(" StringExpression ")"      --parens
								| FunctionCallExpression		--funcs
                                | id        --id
    BooleanExpression           = BooleanExpression conditionalOperator BooleanPrimary       --conditionalOps
                                | BooleanPrimary
    BooleanPrimary              = booleanValue
    							| TypecastExpression		--typecast
                                | "(" BooleanPrimary ")"        --parens
                                | FunctionCallExpression		--funcs
                                | NumericExpression		--numerals
                                | StringExpression		--strings
                                | BooleanExpression		--bools
                                | id        --id
    ArrayAssignment             = id "[" NumericExpression "]" "=" (NumericExpression | StringExpression | BooleanExpression | ArrayExpression) ";"
    ArrayExpression             = ArrayExpression "+" ArrayPrimary       --union
                                | ArrayExpression "-" ArrayPrimary       --difference
                                | ArrayPrimary
    ArrayPrimary                = (numericType | stringType | booleanType)"[" digit+ "]" "()"		--array
                                | "(" ArrayExpression ")"      --parens
								| FunctionCallExpression		--funcs
                                | id		--id
    
    Block						= "{" Statement+ "}"

    numericType                 = "int" | "float" | "double"
    stringType                  = "string"
    booleanType                 = "bool"
    arrayType                   = (arrayType | numericType | stringType | booleanType)"[]"
    booleanValue                = ("true" | "false")
    numericValue                = digit+ ("." digit+)?
    stringValue                 = "\"" (~"\"" any)* "\""
    iterationOperator           = "++" | "--"
    incrementOperator			= "+=" | "-=" | "*=" | "/="
    conditionalOperator         = "<=" | "<" | "==" | "!=" | ">=" | ">"
    keyword                     = "print" | "while" | "if" | "else" | "break" | "continue" | "void" | numericType | stringType | booleanType | arrayType | booleanValue
    id                          = ~keyword letter idchar*
    idchar                      = letter | digit | "_"
    space                       += "//" (~"\n" any)*          --comment
}