Convaneo {
	Program                     = Statement+
    Statement                   = FunctionDeclaration
                                | VariableDeclaration
    							| VariableAssignment
                                | ArrayAssignment
    							| PrintFunction
                                | WhileLoop
                                | IfBlock
                                | ForLoop
                                | ForEach
                                | Iteration
                                | return id ";"   --returnID
                                | return Expression ";"   --return
                                | return ";"    --shortReturn
                                | break ";" --break
                                | FunctionCallExpression ";" --function 
    FunctionDeclaration         = Type id "(" Parameters ")" Block
	VariableDeclaration         = Type id ":=" Expression ";"?
    VariableAssignment          = id "=" Expression ";"?   --assign
    							| id incrementOperator NumericExpression ";"   --operator
    PrintFunction               = print "(" StringExpression ")" ";"
                                | print "(" id ")" ";"
    WhileLoop                   = while "(" BooleanExpression ")" Block
    IfBlock                     = IfStatement ElseIfStatement* ElseStatement?
    IfStatement                 = if "(" BooleanExpression ")" Block
    ElseIfStatement             = elseIf "(" BooleanExpression ")" Block
    ElseStatement               = else Block
    ForLoop                     = for "(" VariableDeclaration BooleanExpression ";" Iteration ")" Block 
    ForEach                     = for "(" Type id "in" id ")" Block    
    Iteration                   = iterationOperator id ";"  --pre
                                | id iterationOperator ";"  --post
    FunctionCallExpression      = id "(" ArgumentsExpression ")"
    Parameters                   = ParameterTerm*
    ParameterTerm                = Type id ","?
    ArgumentsExpression         = ArgumentValue*
    ArgumentValue               = Expression ","?   --expression
                                | id ","?   --id
    Typecast                    = "(" Type ")" FunctionCallExpression --functionCall
								| "(" Type ")" Expression   --expression
                                | "(" Type ")" id   --id
    NumericExpression           = NumericExpression "+" NumericTerm     --add
                                | NumericExpression "-" NumericTerm     --sub
                                | NumericTerm
    NumericTerm                 = NumericTerm "*" NumericFactor     --mul
                                | NumericTerm "/" NumericFactor     --div
                                | NumericTerm "%" NumericFactor     --mod
                                | NumericFactor
    NumericFactor               = NumericPrimary ("**") NumericFactor       --exp
                                | "-" NumericPrimary       --neg
                                | NumericPrimary
    NumericPrimary              = numericValue ~comparisonOperator
    							| Typecast		--typecast
                                | id iterationOperator ~comparisonOperator       --iterPost
                                | iterationOperator id ~comparisonOperator       --iterPre
                                | "(" NumericExpression ")" ~comparisonOperator    --parens
                                | FunctionCallExpression ~comparisonOperator		--funcs
                                | id ~comparisonOperator		--id
    StringExpression            = StringExpression "+" StringPrimary       --add
                                | StringPrimary
    StringPrimary               = stringValue ~comparisonOperator
  							  	| Typecast		--typecast
                                | "(" StringExpression ")" ~comparisonOperator      --parens
								| FunctionCallExpression ~comparisonOperator		--funcs
                                | id ~comparisonOperator        --id
    BooleanExpression           = "(" BooleanExpression ")" (logicOperator BooleanExpression)* --paren
    							| BooleanSecondary comparisonOperator BooleanSecondary --compare
    							| BooleanExpression logicOperator BooleanExpression   --logic
                                | BooleanPrimary
    BooleanPrimary              = booleanValue
                                | id    --id
    BooleanSecondary            = "(" BooleanSecondary ")"        --parens
                                | FunctionCallExpression
                                | NumericExpression
                                | StringExpression
                                | BooleanExpression
                                | id        --id
                                | numericValue
                                | stringValue
                                | booleanValue
    ArrayAssignment             = id "[" NumericExpression "]" "=" Expression ";"
    ArrayExpression             = ArrayExpression "+" ArrayPrimary       --union
                                | ArrayExpression "-" ArrayPrimary       --difference
                                | ArrayPrimary
    ArrayPrimary                = Type "[" NumericExpression "]" "()"		--array
                                | "(" ArrayExpression ")"      --parens
								| FunctionCallExpression		--funcs
                                | id		--id
    Block						= "{" Statement* "}"
    Type                        = ArrayType
                                | numericType
                                | stringType
                                | booleanType
                                | void
    ArrayType                   = Type "[]"
    Expression                  = NumericExpression
                                | StringExpression
                                | BooleanExpression
                                | ArrayExpression

    numericType                 = "int" --int 
                                | "float" --float 
                                | "double" --double
    stringType                  = "string"
    booleanType                 = "bool"
    booleanValue                = "true"   --true
                                | "false"   --false
    numericValue                = floatValue 
                                | doubleValue 
                                | intValue
    intValue                    = digit+
    floatValue                  = digit+ ("." digit+)? "f" ~alnum 
    doubleValue                 = digit+ ("." digit+)
    stringValue                 = "\"" (~"\"" any)* "\""
    iterationOperator           = "++" | "--"
    incrementOperator			= "+=" | "-=" | "*=" | "/="
    comparisonOperator          = "<=" | "<" | "==" | "!=" | ">=" | ">"
    logicOperator               = "||" | "&&"
    print                       = "print" ~alnum
    while                       = "while" ~alnum
    if                          = "if" ~alnum
    elseIf                      = "else if" ~alnum
    else                        = "else" ~alnum
    break                       = "break" ~alnum
    return                      = "return" ~alnum
    void                        = "void" ~alnum
    for                         = "for" ~alnum
    keyword                     = iterationOperator | incrementOperator | comparisonOperator | comparisonOperator | logicOperator | print | while | if | elseIf | else | break | return | void | for | numericType | stringType | booleanType | booleanValue
    id                          = ~keyword letter idchar*
    idchar                      = letter | digit | "_"
    space                       += "//" (~"\n" any)*	--comment
}