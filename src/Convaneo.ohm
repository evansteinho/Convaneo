Convaneo {
	Program                     = Statement+
    Statement                   = FunctionDeclaration
                                | VariableDeclaration
    							| VariableAssignment
                                | ArrayAssignment
    							| PrintFunction
                                | WhileLoop
                                | IfBlock
                                | ForLoop
                                | ForEach
                                | Iteration
                                | return Expression ";"   --return
                                | return ";"    --shortReturn
                                | break ";" --break
    FunctionDeclaration         = Type id "(" Parameters ")" Block  --args
                                | Type id "(" ")" Block --noArgs
	VariableDeclaration         = Type id ":=" Expression ";"
    VariableAssignment          = id "=" Expression ";"   --assign
    							| id incrementOperator NumericExpression ";"   --operator
    PrintFunction               = print "(" StringExpression ")" ";"
                                | print "(" id ")" ";"
    WhileLoop                   = while "(" BooleanExpression ")" Block
    IfBlock                     = IfStatement ElseIfStatement* ElseStatement?
    IfStatement                 = if "(" BooleanExpression ")" Block
    ElseIfStatement             = elseIf "(" BooleanExpression ")" Block
    ElseStatement               = else Block
    ForLoop                     = for "(" VariableDeclaration ";" BooleanExpression ";" (VariableAssignment | Iteration) ")" Block  --for
    ForEach                     = for "(" Type id "in" id ")" Block    --for
    Iteration                   = iterationOperator id ";"  --pre
                                | id iterationOperator ";"  --post
    FunctionCallExpression      = id "(" ArgumentsExpression ")"
    Parameters                   = ParameterTerms*
    ParameterTerms                = Type id ","?
    ArgumentsExpression         = ArgumentValue*
    ArgumentValue               = Expression ","?   --expression
                                | id ","?   --id
    TypecastExpression          = "(" Type ")" FunctionCallExpression --functionCall
								| "(" Type ")" Expression   --expression
                                | "(" Type ")" id   --id
    NumericExpression           = NumericExpression "+" NumericTerm     --add
                                | NumericExpression "-" NumericTerm     --sub
                                | NumericTerm
    NumericTerm                 = NumericTerm "*" NumericFactor     --mul
                                | NumericTerm "/" NumericFactor     --div
                                | NumericTerm "%" NumericFactor     --mod
                                | NumericFactor
    NumericFactor               = NumericPrimary ("**") NumericFactor       --exp
                                | "-" NumericPrimary       --neg
                                | NumericPrimary
    NumericPrimary              = numericValue
    							| TypecastExpression		--typecast
                                | id iterationOperator       --iterPost
                                | iterationOperator id       --iterPre
                                | "(" NumericExpression ")"     --parens
                                | FunctionCallExpression		--funcs
                                | id		--id
    StringExpression            = StringExpression "+" StringPrimary       --add
                                | StringPrimary
    StringPrimary               = stringValue
  							  	| TypecastExpression		--typecast
                                | "(" StringExpression ")"      --parens
								| FunctionCallExpression		--funcs
                                | id        --id
    BooleanExpression           = BooleanExpression conditionalOperator BooleanPrimary       --conditionalOps
                                | BooleanPrimary
    BooleanPrimary              = booleanValue
    							| TypecastExpression		--typecast
                                | "(" BooleanPrimary ")"        --parens
                                | FunctionCallExpression		--funcs
                                | NumericExpression		--numerals
                                | StringExpression		--strings
                                | BooleanExpression		--bools
                                | id        --id
    ArrayAssignment             = id "[" NumericExpression "]" "=" Expression ";"
    ArrayExpression             = ArrayExpression "+" ArrayPrimary       --union
                                | ArrayExpression "-" ArrayPrimary       --difference
                                | ArrayPrimary
    ArrayPrimary                = Type"[" digit+ "]" "()"		--array
                                | "(" ArrayExpression ")"      --parens
								| FunctionCallExpression		--funcs
                                | id		--id
    
    Block						= "{" Statement+ "}"
    Type                        = arrayType --array
                                | numericType   --numeric
                                | stringType    --string
                                | booleanType   --bool
                                | void  --void
    Expression                  = NumericExpression --numeric
                                | StringExpression  --string
                                | BooleanExpression --bool
                                | ArrayExpression   --array

    numericType                 = "int" | "float" | "double"
    stringType                  = "string"
    booleanType                 = "bool"
    arrayType                   = (arrayType | numericType | stringType | booleanType)"[]"
    booleanValue                = ("true" | "false")
    numericValue                = digit+ ("." digit+)?
    stringValue                 = "\"" (~"\"" any)* "\""
    iterationOperator           = "++" | "--"
    incrementOperator			= "+=" | "-=" | "*=" | "/="
    conditionalOperator         = "<=" | "<" | "==" | "!=" | ">=" | ">"
    print                       = "print"
    while                       = "while"
    if                          = "if"
    elseIf                      = "else if"
    else                        = "else"
    break                       = "break"
    return                      = "return"
    void                        = "void"
    for                         = "for"
    keyword                     = print | while | if | elseIf | else | break | return | void | for | numericType | stringType | booleanType | arrayType | booleanValue
    id                          = ~keyword letter idchar*
    idchar                      = letter | digit | "_"
    space                       += "//" (~"\n" any)*	--comment
}